<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <title>Luiza Flash Card</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            -webkit-tap-highlight-color: transparent;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            user-select: none;
        }
        
        body {
            background-color: #f5f7fa;
            color: #333;
            line-height: 1.6;
            overscroll-behavior: none;
        }
        
        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background-color: #2c3e50;
            color: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            font-size: 2.2rem;
            margin-bottom: 10px;
        }
        
        .subtitle {
            font-size: 1.1rem;
            opacity: 0.9;
        }
        
        .tabs {
            display: flex;
            margin-bottom: 20px;
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        
        .tab {
            flex: 1;
            padding: 15px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: 600;
            min-height: 44px; /* 苹果推荐的最小触摸目标 */
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .tab.active {
            background-color: #3498db;
            color: white;
        }
        
        .tab:hover:not(.active) {
            background-color: #f1f1f1;
        }
        
        .content {
            display: none;
            background-color: white;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            margin-bottom: 20px;
        }
        
        .content.active {
            display: block;
        }
        
        .card-form {
            display: grid;
            gap: 15px;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
        }
        
        label {
            margin-bottom: 5px;
            font-weight: 600;
        }
        
        input, textarea {
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
            -webkit-user-select: text;
            user-select: text;
            min-height: 44px; /* 优化触摸体验 */
        }
        
        textarea {
            min-height: 100px;
            resize: vertical;
        }
        
        button {
            padding: 12px 20px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: background-color 0.3s;
            min-height: 44px; /* 苹果推荐的最小触摸目标 */
        }
        
        button:hover {
            background-color: #2980b9;
        }
        
        .btn-danger {
            background-color: #e74c3c;
        }
        
        .btn-danger:hover {
            background-color: #c0392b;
        }
        
        .btn-success {
            background-color: #2ecc71;
        }
        
        .btn-success:hover {
            background-color: #27ae60;
        }
        
        .card-list {
            margin-top: 20px;
        }
        
        .card-item {
            background-color: #f9f9f9;
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 6px;
            border-left: 4px solid #3498db;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .card-content {
            flex: 1;
        }
        
        .card-actions {
            display: flex;
            gap: 10px;
        }
        
        .study-card {
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            text-align: center;
            min-height: 300px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }
        
        .card-front, .card-back {
            font-size: 1.4rem;
            margin-bottom: 20px;
            -webkit-user-select: text;
            user-select: text;
        }
        
        .card-back {
            display: none;
            color: #2c3e50;
        }
        
        .difficulty-buttons {
            display: none;
            gap: 10px;
            margin-top: 20px;
            flex-wrap: wrap;
            justify-content: center;
        }
        
        .difficulty-btn {
            padding: 10px 15px;
            border-radius: 4px;
            font-weight: 600;
            cursor: pointer;
            min-width: 150px;
            min-height: 44px; /* 苹果推荐的最小触摸目标 */
        }
        
        .again {
            background-color: #e74c3c;
        }
        
        .hard {
            background-color: #e67e22;
        }
        
        .good {
            background-color: #3498db;
        }
        
        .easy {
            background-color: #2ecc71;
        }
        
        .progress-info {
            margin-top: 20px;
            text-align: center;
            font-size: 1.1rem;
        }
        
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }
        
        .stat-card {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            color: #3498db;
            margin: 10px 0;
        }
        
        .empty-state {
            text-align: center;
            padding: 40px;
            color: #7f8c8d;
        }
        
        .card-info {
            margin-top: 10px;
            font-size: 0.9rem;
            color: #7f8c8d;
        }
        
        /* 手机端优化 */
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            h1 {
                font-size: 1.8rem;
            }
            
            .card-item {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .card-actions {
                margin-top: 10px;
                width: 100%;
                justify-content: flex-end;
            }
            
            .difficulty-buttons {
                flex-direction: column;
                width: 100%;
            }
            
            .difficulty-btn {
                min-width: 100%;
                font-size: 1.1rem;
            }
            
            .study-card {
                padding: 20px;
                min-height: 250px;
            }
            
            .card-front, .card-back {
                font-size: 1.2rem;
            }
            
            .tab {
                padding: 12px 8px;
                font-size: 0.9rem;
            }
        }

        /* 小屏幕手机优化 */
        @media (max-width: 480px) {
            .container {
                padding: 5px;
            }
            
            .content {
                padding: 15px;
            }
            
            h1 {
                font-size: 1.5rem;
            }
            
            .card-front, .card-back {
                font-size: 1.1rem;
            }
            
            button {
                padding: 10px 15px;
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Luiza Flashcards</h1>
            <p class="subtitle">By @sai</p>
        </header>
        
        <div class="tabs">
            <div class="tab active" data-tab="study">Study</div>
            <div class="tab" data-tab="cards">Manage Cards</div>
            <div class="tab" data-tab="stats">Statistics</div>
        </div>
        
        <div id="study" class="content active">
            <div class="study-card">
                <div class="card-front" id="card-front">Loading cards...</div>
                <div class="card-back" id="card-back"></div>
                <button id="show-answer" style="display: none;">Show Answer</button>
                <div class="difficulty-buttons">
                    <button class="difficulty-btn again">Again (1 min)</button>
                    <button class="difficulty-btn hard">Hard (5 min)</button>
                    <button class="difficulty-btn good">Good (15 min)</button>
                    <button class="difficulty-btn easy">Easy (1 day)</button>
                </div>
                <div class="card-info" id="card-info"></div>
            </div>
            <div class="progress-info">
                <p>Cards due today: <span id="remaining-cards">0</span></p>
                <p>New cards: <span id="new-cards">0</span></p>
            </div>
        </div>
        
        <div id="cards" class="content">
            <h2>Create New Card</h2>
            <form class="card-form" id="card-form">
                <div class="form-group">
                    <label for="front">Front (Question)</label>
                    <textarea id="front" placeholder="Enter question or front content..." required></textarea>
                </div>
                <div class="form-group">
                    <label for="back">Back (Answer)</label>
                    <textarea id="back" placeholder="Enter answer or back content..." required></textarea>
                </div>
                <button type="submit">Add Card</button>
            </form>
            
            <h2>My Cards (<span id="card-count">0</span>)</h2>
            <div class="card-list" id="card-list">
                <div class="empty-state" id="empty-cards">
                    <p>No cards created yet</p>
                    <p>Use the form above to create your first flashcard</p>
                </div>
            </div>
        </div>
        
        <div id="stats" class="content">
            <h2>Study Statistics</h2>
            <div class="stats">
                <div class="stat-card">
                    <h3>Total Cards</h3>
                    <div class="stat-value" id="total-cards">0</div>
                </div>
                <div class="stat-card">
                    <h3>Studied Today</h3>
                    <div class="stat-value" id="today-studied">0</div>
                </div>
                <div class="stat-card">
                    <h3>Total Reviews</h3>
                    <div class="stat-value" id="total-studied">0</div>
                </div>
                <div class="stat-card">
                    <h3>Mastery</h3>
                    <div class="stat-value" id="mastery">0%</div>
                </div>
            </div>
            
            <h2>Recent Activity</h2>
            <div id="recent-activity">
                <div class="empty-state">
                    <p>No study activity yet</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Data model
        let cards = JSON.parse(localStorage.getItem('ankiCards')) || [];
        let studySession = {
            currentCardIndex: 0,
            studyPool: [],
            studiedToday: 0
        };

        // DOM elements
        const tabs = document.querySelectorAll('.tab');
        const contents = document.querySelectorAll('.content');
        const cardForm = document.getElementById('card-form');
        const cardList = document.getElementById('card-list');
        const emptyCards = document.getElementById('empty-cards');
        const cardCount = document.getElementById('card-count');
        const showAnswerBtn = document.getElementById('show-answer');
        const difficultyButtons = document.querySelector('.difficulty-buttons');
        const cardFront = document.getElementById('card-front');
        const cardBack = document.getElementById('card-back');
        const remainingCards = document.getElementById('remaining-cards');
        const newCardsElem = document.getElementById('new-cards');
        const totalCardsElem = document.getElementById('total-cards');
        const todayStudiedElem = document.getElementById('today-studied');
        const totalStudiedElem = document.getElementById('total-studied');
        const masteryElem = document.getElementById('mastery');
        const cardInfo = document.getElementById('card-info');
        const difficultyBtns = document.querySelectorAll('.difficulty-btn');

        // Initialize - automatically start studying
        document.addEventListener('DOMContentLoaded', function() {
            loadCards();
            updateStats();
            setupEventListeners();
            startStudySession(); // Automatically start studying
        });

        // Set up event listeners
        function setupEventListeners() {
            // Tab switching
            tabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    const tabId = tab.getAttribute('data-tab');
                    
                    tabs.forEach(t => t.classList.remove('active'));
                    contents.forEach(c => c.classList.remove('active'));
                    
                    tab.classList.add('active');
                    document.getElementById(tabId).classList.add('active');
                    
                    if (tabId === 'stats') {
                        updateStats();
                    } else if (tabId === 'study') {
                        // Refresh and restart study session when switching to study tab
                        loadCards();
                        startStudySession();
                    }
                });
            });
            
            // Add card form
            cardForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const front = document.getElementById('front').value.trim();
                const back = document.getElementById('back').value.trim();
                
                if (front && back) {
                    addCard(front, back);
                    cardForm.reset();
                }
            });
            
            // Show answer button
            showAnswerBtn.addEventListener('click', function() {
                cardBack.style.display = 'block';
                showAnswerBtn.style.display = 'none';
                difficultyButtons.style.display = 'flex';
                updateDifficultyButtons();
            });
            
            // Difficulty buttons
            document.querySelectorAll('.difficulty-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const difficulty = this.textContent.split(' ')[0];
                    rateCard(difficulty);
                });
            });
        }

        // Load cards and refresh study pool
        function loadCards() {
            const now = new Date();
            
            // Separate cards into due cards and new cards
            const dueCards = [];
            const newCards = [];
            
            cards.forEach(card => {
                // A card is new if it has never been reviewed OR if it was marked as new again
                const isNewCard = card.reviewCount === 0 || card.isNew;
                
                if (isNewCard) {
                    // New cards are always available for study
                    newCards.push(card);
                } else if (new Date(card.nextReview) <= now) {
                    // Mature cards that are due
                    dueCards.push(card);
                }
            });
            
            // Combine due cards and new cards for study (new cards first)
            studySession.studyPool = [...newCards, ...dueCards];
            
            // Update UI
            remainingCards.textContent = dueCards.length;
            newCardsElem.textContent = newCards.length;
            renderCardList();
        }

        // Render card list
        function renderCardList() {
            if (cards.length === 0) {
                emptyCards.style.display = 'block';
                cardList.innerHTML = '';
            } else {
                emptyCards.style.display = 'none';
                cardList.innerHTML = '';
                
                cards.forEach((card, index) => {
                    const cardItem = document.createElement('div');
                    cardItem.className = 'card-item';
                    
                    // Determine card status
                    let status = 'New';
                    if (card.reviewCount > 0) {
                        if (card.isNew) {
                            status = 'New (reset)';
                        } else {
                            status = 'Mature';
                        }
                    }
                    
                    cardItem.innerHTML = `
                        <div class="card-content">
                            <strong>${card.front}</strong>
                            <p>${card.back}</p>
                            <small>Status: ${status} | Next review: ${formatDate(card.nextReview)}</small>
                            <div class="card-info">
                                Reviews: ${card.reviewCount} | 
                                Interval: ${card.interval > 0 ? formatInterval(card.interval) : 'New'} | 
                                Ease: ${card.ease ? card.ease.toFixed(2) : '2.50'}
                            </div>
                        </div>
                        <div class="card-actions">
                            <button class="btn-danger" onclick="deleteCard(${index})">Delete</button>
                        </div>
                    `;
                    cardList.appendChild(cardItem);
                });
            }
            
            cardCount.textContent = cards.length;
        }

        // Add card
        function addCard(front, back) {
            const newCard = {
                front,
                back,
                interval: 0, // 0 means it's a new card
                ease: 2.5,
                nextReview: new Date(),
                reviewCount: 0,
                correctCount: 0,
                isNew: true, // Mark as new card
                created: new Date().toISOString()
            };
            
            cards.push(newCard);
            saveCards();
            loadCards(); // Refresh study pool
            startStudySession(); // Restart study session with new card
        }

        // Delete card
        function deleteCard(index) {
            if (confirm('Are you sure you want to delete this card?')) {
                cards.splice(index, 1);
                saveCards();
                loadCards(); // Refresh the study pool
                startStudySession(); // Restart study session
            }
        }

        // Start study session
        function startStudySession() {
            if (studySession.studyPool.length === 0) {
                // No cards available
                cardFront.textContent = 'No cards available for study. Add some cards first!';
                cardBack.style.display = 'none';
                showAnswerBtn.style.display = 'none';
                difficultyButtons.style.display = 'none';
                cardInfo.textContent = '';
                return;
            }
            
            studySession.currentCardIndex = 0;
            showNextCard();
        }

        // Show next card
        function showNextCard() {
            if (studySession.currentCardIndex >= studySession.studyPool.length) {
                // Study session ended - refresh and restart
                loadCards();
                if (studySession.studyPool.length > 0) {
                    studySession.currentCardIndex = 0;
                    showNextCard();
                } else {
                    cardFront.textContent = 'Congratulations! You have completed all reviews!';
                    cardBack.style.display = 'none';
                    showAnswerBtn.style.display = 'none';
                    difficultyButtons.style.display = 'none';
                    cardInfo.textContent = '';
                }
                return;
            }
            
            const currentCard = studySession.studyPool[studySession.currentCardIndex];
            cardFront.textContent = currentCard.front;
            cardBack.textContent = currentCard.back;
            cardBack.style.display = 'none';
            showAnswerBtn.style.display = 'block';
            difficultyButtons.style.display = 'none';
            
            // Show card info
            const isNewCard = currentCard.reviewCount === 0 || currentCard.isNew;
            cardInfo.textContent = `Status: ${isNewCard ? 'New' : 'Review'} | Reviews: ${currentCard.reviewCount}`;
            
            // Update progress
            const remaining = studySession.studyPool.length - studySession.currentCardIndex;
            cardInfo.textContent += ` | Cards remaining: ${remaining}`;
        }

        // Update difficulty buttons with next review times
        function updateDifficultyButtons() {
            const currentCard = studySession.studyPool[studySession.currentCardIndex];
            const isNewCard = currentCard.reviewCount === 0 || currentCard.isNew;
            
            if (isNewCard) {
                // For new cards
                difficultyBtns[0].textContent = 'Again (1 min)';
                difficultyBtns[1].textContent = 'Hard (5 min)';
                difficultyBtns[2].textContent = 'Good (15 min)';
                difficultyBtns[3].textContent = 'Easy (1 day)';
            } else {
                // For mature cards
                const intervals = calculateIntervals(currentCard);
                difficultyBtns[0].textContent = `Again (1 min)`;
                difficultyBtns[1].textContent = `Hard (${formatInterval(intervals.hard)})`;
                difficultyBtns[2].textContent = `Good (${formatInterval(intervals.good)})`;
                difficultyBtns[3].textContent = `Easy (${formatInterval(intervals.easy)})`;
            }
        }

        // Calculate intervals for mature cards
        function calculateIntervals(card) {
            // Anki's algorithm for mature cards
            const againInterval = 1 / (24 * 60); // 1 minute in days
            const hardInterval = Math.max(card.interval * 1.2, 5/(24*60)); // At least 5 minutes
            const goodInterval = card.interval * card.ease;
            const easyInterval = card.interval * card.ease * 1.3;
            
            return {
                again: againInterval,
                hard: hardInterval,
                good: goodInterval,
                easy: easyInterval
            };
        }

        // Rate card
        function rateCard(difficulty) {
            const currentCard = studySession.studyPool[studySession.currentCardIndex];
            const originalCardIndex = cards.findIndex(card => card.front === currentCard.front);
            const isNewCard = currentCard.reviewCount === 0 || currentCard.isNew;
            
            // Update card data
            cards[originalCardIndex].reviewCount++;
            
            let interval;
            let easeChange = 0;
            let resetToNew = false;
            
            if (isNewCard) {
                // For new cards
                switch(difficulty) {
                    case 'Again':
                        interval = 1 / (24 * 60); // 1 minute in days
                        easeChange = -0.2;
                        // Keep as new card
                        cards[originalCardIndex].isNew = true;
                        break;
                    case 'Hard':
                        interval = 5 / (24 * 60); // 5 minutes in days
                        easeChange = -0.15;
                        // Keep as new card
                        cards[originalCardIndex].isNew = true;
                        break;
                    case 'Good':
                        interval = 15 / (24 * 60); // 15 minutes in days
                        // Transition to mature card
                        cards[originalCardIndex].isNew = false;
                        break;
                    case 'Easy':
                        interval = 1; // 1 day
                        easeChange = 0.1;
                        // Transition to mature card
                        cards[originalCardIndex].isNew = false;
                        break;
                }
            } else {
                // For mature cards
                switch(difficulty) {
                    case 'Again':
                        interval = 1 / (24 * 60); // 1 minute in days
                        easeChange = -0.2;
                        // Reset card to new status
                        resetToNew = true;
                        cards[originalCardIndex].isNew = true;
                        break;
                    case 'Hard':
                        interval = Math.max(currentCard.interval * 1.2, 5/(24*60));
                        easeChange = -0.15;
                        break;
                    case 'Good':
                        interval = currentCard.interval * currentCard.ease;
                        break;
                    case 'Easy':
                        interval = currentCard.interval * currentCard.ease * 1.3;
                        easeChange = 0.1;
                        break;
                }
            }
            
            // Update ease factor
            cards[originalCardIndex].ease = Math.max(1.3, (cards[originalCardIndex].ease || 2.5) + easeChange);
            
            // Record correct answer
            if (difficulty !== 'Again') {
                cards[originalCardIndex].correctCount++;
            }
            
            // Update interval (unless it's an Again on a mature card, which resets it)
            if (!resetToNew) {
                cards[originalCardIndex].interval = interval;
            } else {
                cards[originalCardIndex].interval = 0; // Reset interval for new card
            }
            
            // Calculate next review date
            const nextReviewDate = new Date();
            nextReviewDate.setTime(nextReviewDate.getTime() + (interval * 24 * 60 * 60 * 1000));
            cards[originalCardIndex].nextReview = nextReviewDate;
            
            studySession.studiedToday++;
            
            saveCards();
            
            // Move to next card and refresh study pool
            studySession.currentCardIndex++;
            loadCards(); // Refresh study pool with updated cards
            
            // Continue with next card or restart session
            if (studySession.currentCardIndex < studySession.studyPool.length) {
                showNextCard();
            } else {
                startStudySession(); // Restart with refreshed pool
            }
            
            updateStats();
        }

        // Update statistics
        function updateStats() {
            totalCardsElem.textContent = cards.length;
            todayStudiedElem.textContent = studySession.studiedToday;
            
            const totalStudied = cards.reduce((sum, card) => sum + card.reviewCount, 0);
            totalStudiedElem.textContent = totalStudied;
            
            const totalCorrect = cards.reduce((sum, card) => sum + card.correctCount, 0);
            const mastery = totalStudied > 0 ? Math.round((totalCorrect / totalStudied) * 100) : 0;
            masteryElem.textContent = `${mastery}%`;
        }

        // Save cards to local storage
        function saveCards() {
            localStorage.setItem('ankiCards', JSON.stringify(cards));
        }

        // Format date
        function formatDate(date) {
            const dateObj = new Date(date);
            if (isToday(dateObj)) {
                return 'Today';
            } else if (isTomorrow(dateObj)) {
                return 'Tomorrow';
            } else {
                return dateObj.toLocaleDateString('en-US');
            }
        }

        // Format interval for display
        function formatInterval(intervalInDays) {
            const minutes = Math.round(intervalInDays * 24 * 60);
            const hours = Math.round(intervalInDays * 24);
            const days = Math.round(intervalInDays);
            
            if (minutes < 60) {
                return `${minutes} min`;
            } else if (hours < 24) {
                return `${hours} hour${hours > 1 ? 's' : ''}`;
            } else if (days < 30) {
                return `${days} day${days > 1 ? 's' : ''}`;
            } else {
                const months = Math.round(days / 30);
                return `${months} month${months > 1 ? 's' : ''}`;
            }
        }

        // Check if date is today
        function isToday(date) {
            const today = new Date();
            return date.getDate() === today.getDate() &&
                   date.getMonth() === today.getMonth() &&
                   date.getFullYear() === today.getFullYear();
        }

        // Check if date is tomorrow
        function isTomorrow(date) {
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            return date.getDate() === tomorrow.getDate() &&
                   date.getMonth() === tomorrow.getMonth() &&
                   date.getFullYear() === tomorrow.getFullYear();
        }
    </script>
</body>
</html>
